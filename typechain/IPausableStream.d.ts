/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import { Contract, ContractTransaction } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPausableStreamInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "PausableStreamCreated(uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PausableStreamCreated"): EventFragment;
}

export class IPausableStream extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPausableStreamInterface;

  functions: {};

  callStatic: {};

  filters: {
    PausableStreamCreated(
      id: null,
      startTime: null,
      deposit: null,
      duration: null,
      ratePerSecond: null,
      isActive: null
    ): EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
