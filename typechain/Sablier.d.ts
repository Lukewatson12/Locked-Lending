/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SablierInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(uint256,address)": FunctionFragment;
    "cancelStream(uint256)": FunctionFragment;
    "createStream(address,uint256,address,uint256,uint256)": FunctionFragment;
    "deltaOf(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "getStream(uint256)": FunctionFragment;
    "nextStreamId()": FunctionFragment;
    "withdrawFromStream(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStream",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deltaOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextStreamId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStream",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltaOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextStreamId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStream",
    data: BytesLike
  ): Result;

  events: {
    "CancelStream(uint256,address,address,uint256,uint256)": EventFragment;
    "CreateStream(uint256,address,address,uint256,address,uint256,uint256)": EventFragment;
    "WithdrawFromStream(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromStream"): EventFragment;
}

export class Sablier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SablierInterface;

  functions: {
    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      delta: BigNumber;
      0: BigNumber;
    }>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      delta: BigNumber;
      0: BigNumber;
    }>;

    fee(
      overrides?: CallOverrides
    ): Promise<{
      mantissa: BigNumber;
      0: BigNumber;
    }>;

    "fee()"(
      overrides?: CallOverrides
    ): Promise<{
      mantissa: BigNumber;
      0: BigNumber;
    }>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    nextStreamId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextStreamId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    streamId: BigNumberish,
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(uint256,address)"(
    streamId: BigNumberish,
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelStream(
    streamId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelStream(uint256)"(
    streamId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createStream(
    recipient: string,
    deposit: BigNumberish,
    tokenAddress: string,
    startTime: BigNumberish,
    stopTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createStream(address,uint256,address,uint256,uint256)"(
    recipient: string,
    deposit: BigNumberish,
    tokenAddress: string,
    startTime: BigNumberish,
    stopTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deltaOf(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deltaOf(uint256)"(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStream(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    sender: string;
    recipient: string;
    deposit: BigNumber;
    tokenAddress: string;
    startTime: BigNumber;
    stopTime: BigNumber;
    remainingBalance: BigNumber;
    ratePerSecond: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getStream(uint256)"(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    sender: string;
    recipient: string;
    deposit: BigNumber;
    tokenAddress: string;
    startTime: BigNumber;
    stopTime: BigNumber;
    remainingBalance: BigNumber;
    ratePerSecond: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  nextStreamId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextStreamId()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFromStream(
    streamId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFromStream(uint256,uint256)"(
    streamId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sender: string;
      recipient: string;
      deposit: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      ratePerSecond: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    nextStreamId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    CancelStream(
      streamId: BigNumberish | null,
      sender: string | null,
      recipient: string | null,
      senderBalance: null,
      recipientBalance: null
    ): EventFilter;

    CreateStream(
      streamId: BigNumberish | null,
      sender: string | null,
      recipient: string | null,
      deposit: null,
      tokenAddress: null,
      startTime: null,
      stopTime: null
    ): EventFilter;

    WithdrawFromStream(
      streamId: BigNumberish | null,
      recipient: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextStreamId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(uint256,address)"(
      streamId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelStream(
      streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelStream(uint256)"(
      streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createStream(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createStream(address,uint256,address,uint256,uint256)"(
      recipient: string,
      deposit: BigNumberish,
      tokenAddress: string,
      startTime: BigNumberish,
      stopTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deltaOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deltaOf(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStream(uint256)"(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextStreamId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextStreamId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromStream(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFromStream(uint256,uint256)"(
      streamId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
