/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StreamManagerInterface extends ethers.utils.Interface {
  functions: {
    "createPausableStream(address,uint256,address,uint256,uint256)": FunctionFragment;
    "getPausableStream(uint256)": FunctionFragment;
    "now()": FunctionFragment;
    "pauseStream(uint256)": FunctionFragment;
    "startStream(uint256)": FunctionFragment;
    "withdrawFromStream(uint256,uint256,address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPausableStream",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPausableStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "now", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStream",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPausableStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPausableStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "now", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStream",
    data: BytesLike
  ): Result;

  events: {};
}

export class StreamManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StreamManagerInterface;

  functions: {
    createPausableStream(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPausableStream(address,uint256,address,uint256,uint256)"(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPausableStream(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      duration: BigNumber;
      durationElapsed: BigNumber;
      durationRemaining: BigNumber;
      deposit: BigNumber;
      balanceAccrued: BigNumber;
      startTime: BigNumber;
      isRunning: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    "getPausableStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      duration: BigNumber;
      durationElapsed: BigNumber;
      durationRemaining: BigNumber;
      deposit: BigNumber;
      balanceAccrued: BigNumber;
      startTime: BigNumber;
      isRunning: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    now(
      overrides?: CallOverrides
    ): Promise<{
      time: BigNumber;
      0: BigNumber;
    }>;

    "now()"(
      overrides?: CallOverrides
    ): Promise<{
      time: BigNumber;
      0: BigNumber;
    }>;

    pauseStream(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pauseStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startStream(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFromStream(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFromStream(uint256,uint256,address,uint8)"(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createPausableStream(
    _recipient: string,
    _deposit: BigNumberish,
    _tokenAddress: string,
    _duration: BigNumberish,
    _startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPausableStream(address,uint256,address,uint256,uint256)"(
    _recipient: string,
    _deposit: BigNumberish,
    _tokenAddress: string,
    _duration: BigNumberish,
    _startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPausableStream(
    _streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    duration: BigNumber;
    durationElapsed: BigNumber;
    durationRemaining: BigNumber;
    deposit: BigNumber;
    balanceAccrued: BigNumber;
    startTime: BigNumber;
    isRunning: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
  }>;

  "getPausableStream(uint256)"(
    _streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    duration: BigNumber;
    durationElapsed: BigNumber;
    durationRemaining: BigNumber;
    deposit: BigNumber;
    balanceAccrued: BigNumber;
    startTime: BigNumber;
    isRunning: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
  }>;

  now(overrides?: CallOverrides): Promise<BigNumber>;

  "now()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauseStream(
    _streamId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pauseStream(uint256)"(
    _streamId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startStream(
    _streamId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startStream(uint256)"(
    _streamId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFromStream(
    _streamId: BigNumberish,
    _amount: BigNumberish,
    _who: string,
    _streamType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFromStream(uint256,uint256,address,uint8)"(
    _streamId: BigNumberish,
    _amount: BigNumberish,
    _who: string,
    _streamType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createPausableStream(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createPausableStream(address,uint256,address,uint256,uint256)"(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPausableStream(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      duration: BigNumber;
      durationElapsed: BigNumber;
      durationRemaining: BigNumber;
      deposit: BigNumber;
      balanceAccrued: BigNumber;
      startTime: BigNumber;
      isRunning: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    "getPausableStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      duration: BigNumber;
      durationElapsed: BigNumber;
      durationRemaining: BigNumber;
      deposit: BigNumber;
      balanceAccrued: BigNumber;
      startTime: BigNumber;
      isRunning: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
    }>;

    now(overrides?: CallOverrides): Promise<BigNumber>;

    "now()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseStream(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pauseStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startStream(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromStream(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromStream(uint256,uint256,address,uint8)"(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createPausableStream(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPausableStream(address,uint256,address,uint256,uint256)"(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPausableStream(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPausableStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    now(overrides?: CallOverrides): Promise<BigNumber>;

    "now()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseStream(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pauseStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startStream(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFromStream(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFromStream(uint256,uint256,address,uint8)"(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPausableStream(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPausableStream(address,uint256,address,uint256,uint256)"(
      _recipient: string,
      _deposit: BigNumberish,
      _tokenAddress: string,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPausableStream(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPausableStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    now(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "now()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseStream(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pauseStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startStream(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startStream(uint256)"(
      _streamId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFromStream(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFromStream(uint256,uint256,address,uint8)"(
      _streamId: BigNumberish,
      _amount: BigNumberish,
      _who: string,
      _streamType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
